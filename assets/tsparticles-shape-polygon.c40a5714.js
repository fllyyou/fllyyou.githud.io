class d{draw(n,e,a){const t=this.getCenter(e,a),o=this.getSidesData(e,a),r=o.count.numerator*o.count.denominator,s=o.count.numerator/o.count.denominator,u=180*(s-2)/s,g=Math.PI-Math.PI*u/180;if(!!n){n.beginPath(),n.translate(t.x,t.y),n.moveTo(0,0);for(let l=0;l<r;l++)n.lineTo(o.length,0),n.translate(o.length,0),n.rotate(g)}}getSidesCount(n){var e,a;const t=n.shapeData;return(a=(e=t==null?void 0:t.sides)!==null&&e!==void 0?e:t==null?void 0:t.nb_sides)!==null&&a!==void 0?a:5}}class c extends d{getCenter(n,e){const a=this.getSidesCount(n);return{x:-e/(a/3.5),y:-e/(2.66/3.5)}}getSidesData(n,e){var a,t;const o=n.shapeData,r=(t=(a=o==null?void 0:o.sides)!==null&&a!==void 0?a:o==null?void 0:o.nb_sides)!==null&&t!==void 0?t:5;return{count:{denominator:1,numerator:r},length:e*2.66/(r/3)}}}class h extends d{getCenter(n,e){return{x:-e,y:e/1.66}}getSidesCount(){return 3}getSidesData(n,e){return{count:{denominator:2,numerator:3},length:e*2}}}async function v(i){await i.addShape("polygon",new c)}async function y(i){await i.addShape("triangle",new h)}async function p(i){await v(i),await y(i)}export{p as l};
